1 . replace all the vowels from a string 

SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE (lower(pname), 'a', ''), 'e', ''), 'i', ''), 'o', ''), 'u', ''), 'y', '') AS modified_ename
FROM parts;
-----------------------------------------------------------------------------------------------------------------------------------------------------
2.center allignment

select rpad(lpad(Pname,25,'*'),60,'*') as new from parts
where `P#` = 'P1' ;

for center allignment
-------------------------------------------------------------

3.
converting numbers to words

writing function

-------------------------------------------------------------


ex -2 1. order by descending

select * from supplier
order by city desc;

--------------------------------

ex -2 2.

select * from parts
order by city;

---------------------------------

ex-2 3.

select * from supplier
where status between 10 and 20;
---------------------------------

ex -2 4.

select Pname ,Weight from parts
where Weight not  between 4 and 5;

----------------------------------


ex - 2 5.

select * from supplier 
where Sname like 'V%';


---


select * from supplier  
where Sname >= 'V' and  Sname< 'W';
----


select * from supplier  -- (fastest)
where Sname between 'V' and 'W';


------------------------------------

ex - 2 6.

select * from supplier 
where city like 'N%' ;

------------------------------------

ex - 2 7.

select * from projects
where  Jname like '__o%';
--------------------------------------








exercise 3 :

ex - 3.1

select * from supplier
where ASCII(SUBSTRING(Sname, 1, 1)) BETWEEN 65 AND 90 ;
------------------------------------------------------------


ex - 3.2

select 
 upper(Sname) as captilized_names 
 from supplier;

-----------------------------------------

ex - 3.3

select 
 lower(Sname) as lower_names 
 from supplier;

-----------------------------------------


ex - 3.4

select lpad(Sname,25,'*') from supplier;
-----------------------------------------



ex - 3.5

select replace (Sname,'VI' , 'KI') from supplier;

---------------------------------------------------


ex - 3.6

select replace(replace(sname,'v' ,'K') , 'I','Y') as new from supplier;

--------------------------------------------------------------------------

ex - 3.7

select Sname , length(Sname) as l_S from supplier; 

VISHAL	6
YASH	4
VIRAJ	5
ram	3

-------------------------------------------------------------


ex - 3.8

see 1
sea 2
hi  3
bye 4

this is my table.

select soundex(name) as soundex_values from new_T ;

S000
S000
H000
B000

----------------------------------------------------------


ex - 3.9

Display the Supplier name and the status (as Ten, Twenty, Thirty, etc.).

basically first we have to define our own method to print status into words


so lets first do that

CREATE FUNCTION NumberToWordsTwoDigit(num INT) RETURNS VARCHAR(255)
BEGIN
    DECLARE units CHAR(10);
    DECLARE tens CHAR(100);
    DECLARE words VARCHAR(255);

    -- Define word representations for units (0-9) and tens (10-90)
    SET units = 'zero,one,two,three,four,five,six,seven,eight,nine';
    SET tens = 'ten,eleven,twelve,thirteen,fourteen,fifteen,sixteen,seventeen,eighteen,nineteen,,,twenty,thirty,forty,fifty,sixty,seventy,eighty,ninety'; -- Up to 99

    -- Initialize words to empty string
    SET words = '';

    -- Handle tens place (20-99)
    IF num >= 20 THEN
        -- Extract the tens part (e.g., twenty, thirty, etc.)
        SET words = SUBSTRING_INDEX(tens, ',', FLOOR(num / 10) + 11); -- Adjust index to skip units (0-9) and go to tens (20-90)
        SET num = num % 10;
        IF num > 0 THEN
            SET words = CONCAT(words, ' ', SUBSTRING_INDEX(units, ',', num + 1)); -- Add the units part (0-9)
        END IF;
    ELSE
        -- Handle numbers less than 20 (special cases and units)
        SET words = SUBSTRING_INDEX(units, ',', num + 1); -- Get the word representation directly from units (0-19)
    END IF;

    -- Trim leading and trailing spaces, and return the result
    RETURN TRIM(words);
END //

select Sname , NumberToWordsTwoDigit(status) as new_ss from supplier;

----------------------------------------------------------------------------------



ex - 3.10

select dayname(curdate()) as currentday;

currentday
Friday


-----------------------------------------------------------------------------------




In the context of databases, the term "ACID properties" refers to a set of four properties that guarantee the reliability and consistency of transactions. These properties are fundamental for ensuring that database transactions are processed reliably even in the presence of failures. Here's what each property stands for:

1. **Atomicity**: This property ensures that a transaction is treated as a single unit of work. It means that either all the operations within the transaction are successfully completed and committed, or none of them are. If any part of the transaction fails, the entire transaction is rolled back, and the database state is left unchanged.

2. **Consistency**: This property ensures that a transaction transforms the database from one consistent state to another consistent state. This means that integrity constraints, foreign key relationships, and other database rules are maintained during and after the transaction. The database remains in a valid state at all times.

3. **Isolation**: This property ensures that the intermediate state of a transaction is invisible to other transactions. Transactions should operate independently of each other, and the execution of one transaction should not affect the execution of another concurrently executing transaction. Isolation levels (like Read Uncommitted, Read Committed, Repeatable Read, Serializable) define the degree to which this property is enforced.

4. **Durability**: This property guarantees that once a transaction has been committed, it will persist, and the changes made by the transaction will not be lost, even in the event of a system failure (such as power outage or crash). The changes are permanently stored in the system, typically by writing them to disk or other persistent storage.

These ACID properties collectively ensure that database transactions are executed reliably, with predictable and correct results, even in the face of failures or concurrent access. They are essential for maintaining data integrity and the overall correctness of database operations. Many database management systems (DBMS) provide mechanisms to enforce these properties to varying degrees based on application needs and performance considerations.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
